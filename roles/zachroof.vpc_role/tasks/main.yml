- name: "Creating The VPC"
  ec2_vpc_net:
    name: "{{ vpc_role_vpc_name }}"
    region: "{{ vpc_role_vpc_region }}"
    state: "{{ vpc_role_state }}"
    cidr_block: "{{ vpc_role_vpc_cidr_block }}"
    tags:
      Name: "zachroof.vpc_role.ossec"
  register: "vpc_role_vpc_output"
  tags: ["create_vpc"]

- debug: var="vpc_role_vpc_output" verbosity=3

- name: "Creating The VPC's Internet Gateway"
  ec2_vpc_igw:
    region: "{{ vpc_role_vpc_region }}"
    state: "{{ vpc_role_state }}"
    vpc_id: "{{ vpc_role_vpc_output.vpc.id}}"
  register: "vpc_role_igw_output"
  tags: "igw"

- debug: var="vpc_role_igw_output" verbosity=3

- name: "Creating VPC Subnets"
  ec2_vpc_subnet:
    region: "{{ vpc_role_vpc_region }}"
    state: "{{ vpc_role_state }}"
    vpc_id: "{{ vpc_role_vpc_output.vpc.id  }}"
    az: "{{ item.key }}"
    cidr: "{{ item.value}}"
    tags:
      Name: "{{ item.key }}"
  register: "vpc_role_vpc_subnet_output"
  tags: "subnets"
  with_dict: "{{ vpc_role_subnet_cdr_map }}"

- debug: var="vpc_role_vpc_subnet_output" verbosity=3

- name: "Gathering VPC Route Table Facts"
  ec2_vpc_route_table_facts:
    filters:
      vpc-id: "{{ vpc_role_vpc_output.vpc.id }}"
    region: "{{ vpc_role_vpc_region }}"
  register: "vpc_role_route_table_facts_output"
  tags: "route_table_facts"

- debug: var="vpc_role_route_table_facts_output" verbosity=3

- name: "Hydrating VPC's Main Route Table With Subnets/Routes"
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_role_vpc_output.vpc.id  }}"
    region: "{{ vpc_role_vpc_region }}"
    lookup: "id"
    # It's safe to always leverage the 0 index in this context
    route_table_id: "{{ vpc_role_route_table_facts_output.route_tables[0].id }}"
    purge_routes: false
    purge_subnets: false
    state: "{{ vpc_role_state }}"
    tags:
      Name: "zachroof.vpc_role.main_route_table"
    subnets:
      - "{{ item.value }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ vpc_role_igw_output.gateway.id }}"
  with_dict: "{{ vpc_role_subnet_cdr_map }}"
  register: "vpc_role_route_table_output"
  tags: "route_table"

- debug: var="vpc_role_route_table_output" verbosity=3

# The OSSEC server has an authd daemon (port 1515) which allows for automatic enrollment of clients.
# However, as this daemon doesn't leverage auth, OSSEC recommends hardening the IP space/ports that are
# allowed.  Additionally, OSSEC recommends only making this functionality available for the initial
# registration.  These recommendations are followed below.

# We create a "internode" security group (sg) that only allows OSSEC nodes to communicate with each other.
# The "pre-auth" sg contains the 1515 port while the "post-auth" sg doesn't contain it.
# At the end of the play, the pre_auth security group will be disabled

- name: "Creating Pre-Auth Security Group For Internode OSSEC Client/Server Communication"
  ec2_group:
    name: "{{ vpc_role_sgs.pre_auth_internode  }}"
    state: "{{ vpc_role_state }}"
    description: "{{ vpc_role_sgs.pre_auth_internode }}"
    vpc_id: "{{ vpc_role_vpc_output.vpc.id }}"
    region: "{{ vpc_role_vpc_region }}"
    rules:
      - proto: udp
        ports:
          - 1514
        group_name: "{{ vpc_role_sgs.pre_auth_internode }}"
      - proto: tcp
        ports:
          - 1515
        group_name: "{{ vpc_role_sgs.pre_auth_internode }}"
    rules_egress:
      - proto: udp
        ports:
          - 1514
        group_name: "{{ vpc_role_sgs.pre_auth_internode }}"
      - proto: tcp
        ports:
          - 1515
        group_name: "{{ vpc_role_sgs.pre_auth_internode }}"
  tags: "pre_auth_sg"
  register: "vpc_role_route_pre_auth_sg_output"

- debug: var="vpc_role_route_pre_auth_sg_output" verbosity=3

- name: "Creating Post-Auth Security Group For Internode OSSEC Client/Server Communication"
  ec2_group:
    name: "{{ vpc_role_sgs.post_auth_internode  }}"
    state: "{{ vpc_role_state }}"
    description: "{{ vpc_role_sgs.post_auth_internode }}"
    vpc_id: "{{ vpc_role_vpc_output.vpc.id }}"
    region: "{{ vpc_role_vpc_region }}"
    rules:
      - proto: udp
        ports:
          - 1514
        group_name: "{{ vpc_role_sgs.post_auth_internode }}"
    rules_egress:
      - proto: udp
        ports:
          - 1514
        group_name: "{{ vpc_role_sgs.post_auth_internode }}"
  tags: "post_auth_sg"
  register: "vpc_role_post_auth_sg_output"

- debug: var="vpc_role_post_auth_sg_output" verbosity=3

- name: "Creating Unique Security Groups For OSSEC Client And Server"
  ec2_group:
    name: "{{ vpc_role_sgs[item] }}"
    description: "{{ vpc_role_sgs[item] }}"
    state: "{{ vpc_role_state }}"
    vpc_id: "{{ vpc_role_vpc_output.vpc.id }}"
    region: "{{ vpc_role_vpc_region }}"
    # AWS opens up egress "to the world" by default.
    # We limit this while allowing connectivity for patches, ntp syncs, etc.
    rules_egress:
      - proto: udp
        ports:
          - 123
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
          - 443
          - 80
        cidr_ip: 0.0.0.0/0
  with_items:
    - "client"
    - "server"
  tags: "client_server_sg"
  register: "vpc_role_client_server_sg_output"

- debug: var="vpc_role_client_server_sg_output" verbosity=3
